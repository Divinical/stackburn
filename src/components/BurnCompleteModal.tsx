import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Flame, Share2, TrendingUp, HardDrive, FileX, Download } from "lucide-react";
import { cn } from "@/lib/utils";

interface BurnCompleteModalProps {
  isOpen: boolean;
  onClose: () => void;
  filesBurned: number;
  gbFreed: number;
  oldScore: number;
  newScore: number;
  onShare?: () => void;
}

export const BurnCompleteModal = ({
  isOpen,
  onClose,
  filesBurned,
  gbFreed,
  oldScore,
  newScore,
  onShare
}: BurnCompleteModalProps) => {
  const scoreImprovement = newScore - oldScore;
  const isSignificantImprovement = scoreImprovement >= 10;

  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 GB';
    const gb = bytes / (1024 * 1024 * 1024);
    return `${gb.toFixed(1)} GB`;
  };

  const getBurnIntensity = () => {
    if (filesBurned >= 100) return "inferno";
    if (filesBurned >= 50) return "blaze";
    if (filesBurned >= 20) return "flame";
    return "spark";
  };

  const getBurnMessage = () => {
    const intensity = getBurnIntensity();
    switch (intensity) {
      case "inferno":
        return "Stack apocalypse complete. Your digital landscape is reborn.";
      case "blaze": 
        return "Massive purge executed. The bloat never stood a chance.";
      case "flame":
        return "Solid burn. Your stack breathes easier now.";
      default:
        return "First strike complete. The hunt continues.";
    }
  };

  const exportBurnReport = () => {
    const timestamp = new Date().toLocaleString();
    const reportData = [
      `StackBurn Purge Report`,
      `========================`,
      `Date: ${timestamp}`,
      `Files Burned: ${filesBurned}`,
      `Space Freed: ${formatBytes(gbFreed * 1024 * 1024 * 1024)}`,
      `Burn Score: ${oldScore} ‚Üí ${newScore} (+${scoreImprovement} points)`,
      `Burn Intensity: ${getBurnIntensity().toUpperCase()}`,
      ``,
      `Generated by StackBurn - Post-AI Survival Weapon`,
      `Burn the bloat before it burns you.`
    ].join('\n');

    const blob = new Blob([reportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `stackburn-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[95vw] max-w-sm md:max-w-md mx-4 bg-card border-border">
        <DialogHeader className="text-center space-y-3 md:space-y-4">
          <div className="mx-auto relative">
            <div className={cn(
              "w-12 h-12 md:w-16 md:h-16 rounded-full flex items-center justify-center",
              "bg-gradient-to-br from-flame/20 to-ember/20",
              "border-2 border-flame/30"
            )}>
              <Flame className={cn(
                "w-6 h-6 md:w-8 md:h-8 text-flame",
                "animate-flame-flicker"
              )} />
            </div>
            {/* Flame particles effect */}
            <div className="absolute -inset-2 pointer-events-none">
              <div className="w-1.5 h-1.5 md:w-2 md:h-2 bg-ember rounded-full absolute top-2 right-2 animate-ember-glow" />
              <div className="w-1 h-1 bg-flame rounded-full absolute bottom-3 left-1 animate-ember-glow delay-300" />
              <div className="w-1 h-1 md:w-1.5 md:h-1.5 bg-ember rounded-full absolute top-4 left-3 animate-ember-glow delay-700" />
            </div>
          </div>
          
          <DialogTitle className="text-xl md:text-2xl font-bold text-foreground">
            üî• Purge Complete
          </DialogTitle>
          
          <p className="text-muted-foreground text-xs md:text-sm leading-relaxed px-2">
            {getBurnMessage()}
          </p>
        </DialogHeader>

        {/* Stats Grid */}
        <div className="grid grid-cols-2 gap-3 md:gap-4 my-4 md:my-6">
          <div className="bg-background/50 rounded-lg p-3 md:p-4 text-center border border-border/50">
            <FileX className="w-5 h-5 md:w-6 md:h-6 text-flame mx-auto mb-1 md:mb-2" />
            <div className="text-xl md:text-2xl font-bold text-foreground">{filesBurned}</div>
            <div className="text-xs text-muted-foreground">Files Burned</div>
          </div>
          
          <div className="bg-background/50 rounded-lg p-3 md:p-4 text-center border border-border/50">
            <HardDrive className="w-5 h-5 md:w-6 md:h-6 text-ember mx-auto mb-1 md:mb-2" />
            <div className="text-xl md:text-2xl font-bold text-foreground">{formatBytes(gbFreed * 1024 * 1024 * 1024)}</div>
            <div className="text-xs text-muted-foreground">Space Freed</div>
          </div>
        </div>

        {/* Score Improvement */}
        <div className="bg-gradient-to-r from-forge/10 to-flame/10 rounded-lg p-4 border border-flame/20">
          <div className="flex items-center justify-center gap-2 mb-2">
            <TrendingUp className={cn(
              "w-5 h-5",
              isSignificantImprovement ? "text-flame" : "text-ember"
            )} />
            <span className="text-sm font-medium text-foreground">Score Improvement</span>
          </div>
          
          <div className="text-center">
            <div className="text-lg font-bold text-foreground">
              {oldScore} ‚Üí {newScore}
            </div>
            <Badge 
              variant={isSignificantImprovement ? "destructive" : "secondary"}
              className="mt-1"
            >
              +{scoreImprovement} points
            </Badge>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col gap-2 md:gap-3 mt-4 md:mt-6">
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              onClick={onClose}
              className="flex-1 h-10 md:h-auto text-sm md:text-base"
            >
              Continue Hunt
            </Button>
            
            <Button 
              variant="outline"
              onClick={exportBurnReport}
              className="gap-2 h-10 md:h-auto text-sm md:text-base"
            >
              <Download className="w-3 h-3 md:w-4 md:h-4" />
              Export Report
            </Button>
          </div>
          
          {onShare && (
            <Button 
              variant="default"
              onClick={onShare}
              className="w-full gap-2 h-10 md:h-auto text-sm md:text-base"
            >
              <Share2 className="w-3 h-3 md:w-4 md:h-4" />
              Share Victory
            </Button>
          )}
        </div>

        {/* Optional flavor text based on burn intensity */}
        <div className="text-center mt-3 md:mt-4">
          <p className="text-xs text-muted-foreground italic">
            {getBurnIntensity() === "inferno" && "üèÜ Digital Inferno Master"}
            {getBurnIntensity() === "blaze" && "üî• Purge Specialist"}
            {getBurnIntensity() === "flame" && "‚ö° Stack Cleaner"}
            {getBurnIntensity() === "spark" && "üéØ Getting Started"}
          </p>
        </div>
      </DialogContent>
    </Dialog>
  );
};